/*
object Wrap {
    arr: array[int];
    def Wrap(self: Wrap) {
        self.arr = array[int][10];
    }
}
def main(): int {
    val o = new Wrap();
    val arr = o.arr;
    o.arr[0] = 5;
    print(o.arr[0]);
    return 0;
}
*/

object Dynamic {
    size: int;
    allocated: int;
    arr: array[int];
    def Dynamic(self: Dynamic) {
        self.arr = array[int][2];
        self.allocated = 2;
        self.size = 0;
    }
    def push(self: Dynamic, value: int) {
        self.arr[self.size] = value;
        self.size += 1;
        if(self.allocated == self.size) {
            val newsize = (self.allocated * 2);
            val old = self.arr;
            self.arr = array[int][newsize];
            for(val i = 0; i < self.size; i+= 1;) {
                self.arr[i] = old[i];
            };
            self.allocated = newsize;
        };
    }
    def get(self: Dynamic, index: int): int {
        if(index >= self.size) {
            print("can not do that");
        };
        return self.arr[index];
    }
    def print_arr(self: Dynamic) {
        for(val i = 0; i < self.size; i+= 1;) {
            print(self.arr[i]);
        };
    }
    def compare(self: Dynamic, other: Dynamic)
}
def main(): int {
    val a = new Dynamic();
    a.push(1);
    a.push(2);
    a.push(3);
    a.print_arr();
    return 0;
}



/*
object coord {
    x: int;
    y: int;
    def coord(self: coord, x: int, y: int) {
        self.x = (x + 10);
        self.y = y;
    }
    def add(self: coord, a: int) {
        self.x = (self.x + a);
    }
}
def main(): int {
    val a = new coord(50,1);
    print(a.x);
    a.add(10);
    print(a.x);
    return 0;
}
*/



/*
def main(): int {
    val a = array(1,2,3);
    val b = array(4,5,6);
    val c = concat(a,b);
    print_arr(c);
    return 0;
}
def concat(a: array[T1], b: array[T1]): array[T1] {
    val combined = (a.size + b.size);
    val ret = array[T1][combined];
    for(val i = 0; i < a.size; i += 1;) {
        ret[i] = a[i];
    };
    for(val i = 0; i < b.size; i += 1;) {
        ret[(i + a.size)] = b[i];
    };
    return ret;
}
def print_arr(a: array[int]) {
    val b = 0;
    while(b < a.size) {
        print(a[b]);
        b += 1;
    };
    return;
}
*/


/*
interface coord {
    x: box,
    y: int
}
interface box {
    el: int
}
enum car {
    bmw,
    ford
}
def main(): int {
    val a = new coord{new box{1}, 2};
    val d = a.x.el;
    print(d);
    a.x.el = 2;
    print(a.x.el);
    val b = car.ford;
    print(b);
    return 0;
}
*/


/*
def main(): int {
    val a = array(1, 2, 3);
    val b = array(4, 5, 6);
    val c = concat(a, b);
    for(val d = 0; d < 5; d+=1;) {
        print(d);
    };
    //print_arr(c);
    return 0;
}


def concat(a: array[int], b: array[int]): array[int] {
    val combined = (a.size + b.size);
    val ret = array[int][combined];
    val i = 0;
    while(i < a.size) {
        ret[i] = a[i];
        i += 1;
    };
    i = 0;
    while(i < b.size) {
         ret[(i + a.size)] = b[i];
         i += 1;
    };
    return ret;
}

*/
/*
def main(): int {
  val a = 9;
  print(fib(a));
  return 0;
def fib(n: int): int {
  if(n <= 1) {return n;};
  return (fib((n-1)) + fib((n-2)));
}
*/

/*
def main(): int {
  val a = array(1, 2, 3);
  val b = 0;
  while(b < a.size) {
    print(a[b]);
    b = (b + 1);
  };
  return 0;
}
*/