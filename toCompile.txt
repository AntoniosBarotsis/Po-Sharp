interface coord {
    x: box,
    y: int
}
interface box {
    el: int
}
enum car {
    bmw,
    ford
}
def main(): int {
    val a = new coord{new box{1}, 2};
    val d = a.x.el;
    print(d);
    a.x.el = 2;
    print(a.x.el);
    val b = car.ford;
    print(b);
    return 0;
}



/*
def main(): int {
    val a = array(1, 2, 3);
    val b = array(4, 5, 6);
    val c = concat(a, b);
    for(val d = 0; d < 5; d+=1;) {
        print(d);
    };
    //print_arr(c);
    return 0;
}


def concat(a: array[int], b: array[int]): array[int] {
    val combined = (a.size + b.size);
    val ret = array[int][combined];
    val i = 0;
    while(i < a.size) {
        ret[i] = a[i];
        i += 1;
    };
    i = 0;
    while(i < b.size) {
         ret[(i + a.size)] = b[i];
         i += 1;
    };
    return ret;
}
def print_arr(a: array[int]) {
    val b = 0;
    while(b < a.size) {
        print(a[b]);
        b += 1;
    };
    return;
}
*/
/*
def main(): int {
  val a = 9;
  print(fib(a));
  return 0;
def fib(n: int): int {
  if(n <= 1) {return n;};
  return (fib((n-1)) + fib((n-2)));
}
*/

/*
def main(): int {
  val a = array(1, 2, 3);
  val b = 0;
  while(b < a.size) {
    print(a[b]);
    b = (b + 1);
  };
  return 0;
}
*/